name: Despliega la API de Node.js en Azure

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Haz checkout del repositorio existente
        uses: actions/checkout@v2

      - name: Pon en marcha Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Instala las dependencias
        run: npm install
        working-directory: api

      - name: Configuraci칩n de las variables de entorno
        run: |
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Inicia Terraform
        run: terraform init

      - name: Importa el VMSS existente
        run: |
          terraform import -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                          -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                          -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                          -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                          azurerm_linux_virtual_machine_scale_set.example /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/example-vmss

      - name: Importa el monitor de diagn칩stico existente
        run: terraform import -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" azurerm_monitor_diagnostic_setting.vm_diagnostics "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM|vm-diagnostic-setting"

      - name: Importa la configuraci칩n de escalado autom치tico existente
        run: terraform import -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" azurerm_monitor_autoscale_setting.example "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/myResourceGroup/providers/Microsoft.Insights/autoScaleSettings/example-autoscale"

      - name: Crea el Terraform plan
        run: terraform plan -out=tfplan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}"

      - name: Aplica Terraform
        run: terraform apply -auto-approve tfplan

      - name: Despliega la app web en Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: iaac
          slot-name: production
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
